#!/usr/bin/env python

import threading 
import time
import logging
import signal
import argparse
import os
import sys
import struct

import helper
from network.packet import MSSimPacket
from network.load_balancer import RoundRobinLoadBalancer
from network.raw_tcp.tcp_send_interface import SendNetworkInterface

RUNNING = True # controls main loop
ELEMENTS = []

#LOG_METRICS = ["msg_send","msg_recv","bytes_send","bytes_recv","bad_socket","timeouts"]
LOG_METRICS = ["msg_send","msg_recv"]


class IoTDevice(threading.Thread):
	def __init__(self,
				peers,
				network_protocol=helper.TCP_NETWORK_PROTOCOL,
				min_payload=2048,
				max_payload=4096,
				interval=1.0):

		self.device_id = os.urandom(12)
		self.interval = interval
		logging.info("initialize IoTDevice_{}".format(self.device_id))
		self.network_protocol = network_protocol
		self.running = True
		self.interface = self.initialize_interface(peers=peers)
		self.receive_q = helper.get_queue(multiprocessing_worker=False,maxsize=500)
		self.interface.fork_handler.add_fork(pipeline=self.receive_q,probability=100)
		self.send_q = self.interface.get_send_pipeline()
		#self.reset_report()
		super().__init__()

	def initialize_interface(self,peers,queue_maxsize=50):
		load_balancer = RoundRobinLoadBalancer(host_list=peers)
		if self.network_protocol == helper.TCP_NETWORK_PROTOCOL:
			interface = SendNetworkInterface(t_name="IoTDevice_0_Interface".format(self.device_id),
											 load_balancer=load_balancer,
											 queue_maxsize=queue_maxsize)
		else:
			raise NotImplementedError("Only {} networking is implemented currently".format(AVAILABLE_NETWORK_TYPES)) 
			sys.exit(1)
		interface.start()
		return interface

	def build_packet(self,request_type,payload_size):
		if self.network_protocol == helper.TCP_NETWORK_PROTOCOL:
			import network.raw_tcp.tcp_marshaller as marshaller
		else:
			raise(NotImplementedError("Unknown network protocol ..."))
		
		# payload size currently ignored
		payload = b''
		request_id = os.urandom(MSSimPacket.REQUEST_ID_LEN)
		request_type_bytes = struct.pack("i",request_type)
		payload_size = struct.pack("Q",len(payload))
		packet = MSSimPacket( 	device_id=self.device_id,
								request_id=request_id,
								request_type=request_type_bytes,
								payload_size=payload_size)
		packet.set_payload(payload=payload)
		return packet

	def run(self):
		last_t = 0
		while self.running:
			while not self.receive_q.empty():
				recv_packet = self.receive_q.get()
				logging.debug("{}: received packet: {} ...".format(str(self),recv_packet))
				self.receive_q.task_done()

			time.sleep(self.interval)
			send_packet = self.build_packet(request_type=0,payload_size=0)
			logging.debug("{}:packet put to send: {} ...".format(str(self),send_packet))
			self.send_q.put(send_packet)

	def increase_log_value(self,metric_name,inc_value):
		if metric_name not in self.log:
			self.log[metric_name] = 0
		self.log[metric_name] += inc_value

	def stop(self):
		logging.debug("{}: stopping device ...".format(str(self)))
		self.interface.stop()
		self.running = False

	# reporting
	def reset_report(self):
		self.interface.reset_metrics()


	def get_log(self):
		m = self.interface.get_metrics()
		return m

def average(lst):
	if len(lst) > 0:
		return sum(lst) / len(lst) 
	else:
		return 0

def combine_device_logs(d_logs):
	sum_dict = {}
	list_keys = set()
	for device_logs in d_logs:
		for log in device_logs:
			if "_const_" in log[0]:
				pass
			elif log[0] not in sum_dict:
				sum_dict[log[0]] = log[1]
				if "_list_" in log[0]:
					list_keys.add(log[0])

			else:
				sum_dict[log[0]] += log[1]
	for key in list_keys:
		sum_dict[key] = average(sum_dict[key])
	return sum_dict
		
def report(devices,tcp_sink,bitflow_tag):
	d_log = []
	for device in devices:
		d_log.append(device.get_log())
	sum_dict = combine_device_logs(d_log)
	console_report(sum_dict)
	if tcp_sink:
		bitflow_report(sum_dict,tcp_sink,bitflow_tag)
	for device in devices:
		device.reset_report()

def console_report(sum_log):
	output = ""
	for k,v in sum_log.items():
		v = sum_log[k]
		output = "{}  {}: {}".format(output,k,v)
	logging.info(output)

def bitflow_report(sum_log,tcp_sink,bitflow_tag):
	metrics = []
	metric_names = []
	for k,v in sum_log.items():
		metric_names.append(k)
		metrics.append(v)
	import bitflow.sample
	sample = bitflow.sample.Sample(header=bitflow.sample.Header(metric_names=metric_names),metrics=metrics)
	if bitflow_tag:
		sample.add_tag(bitflow_tag[0],bitflow_tag[1])
	tcp_sink.execute(sample)

def initialize_bitflow(destination):
	try:
		host,port = destination.split(":")
	except:
		logging.error("Could not split {} into host:port pair ...")
		sys.exit(1)
	import bitflow.sinksteps
	tcp_sink = bitflow.sinksteps.TCPSink(host=host,port=int(port),data_format="bin")
	tcp_sink.start()
	return tcp_sink

def sig_int_handler(signal, frame):
	global RUNNING
	global ELEMENTS

	if RUNNING == False:
		os.kill(signal.CTRL_C_EVENT, 0)
		
	RUNNING = False
	for e in ELEMENTS:
		e.stop()

def main():
	global RUNNING
	global ELEMENTS
	report_interval = 1

	signal.signal(signal.SIGINT, sig_int_handler)
	parser = argparse.ArgumentParser()
	# load generator
	parser.add_argument("-host",action='append',help="a node to interact with (hostname:port)",metavar="example-proxy-host.com",required=True)
	parser.add_argument("-devices",type=int,default=10,metavar=50,help="Number of IoTDevices to Simulate")

	#parser.add_argument("-duration",type=int, default=-1,metavar=-1,help="durations in seconds to run (-1 = forever)")
	parser.add_argument("-min_payload",default=2048,type=int,metavar=2048,help="minimum request padding size (bytes)")
	parser.add_argument("-max_payload",default=4096,type=int,metavar=4096,help="maximum request padding size (bytes)")
	parser.add_argument("-interval",default=1.0,type=float,metavar=1.0,help="sending interval")
	
	parser.add_argument("-bitflow_send",type=str,required=False,help="define a destitation to send log data in bitflow format")
	parser.add_argument("-bitflow_tag",type=str,required=False,help="define a bitflow tag set to outgoing samples (key=value)")
	
	# logging
	parser.add_argument("-log",help="Redirect logs to a given file in addition to the console.",metavar='')
	parser.add_argument("-v",action='store_true',help="Enable verbose logging Sink")
	args = parser.parse_args()

	# manage logging
	debug = False
	if args.v:
		debug = True

	if args.log:
		logfile = args.log
		helper.configure_logging(debug,logfile)
	else:
		helper.configure_logging(debug)
		logging.debug("debug mode enabled")

	peers = []
	for h in args.host:
		try:
			host,port = h.split(":")
			port = int(port)
		except:
			logging.error("Could not parse host parameter correct, requrires \'hostname:port\'...")
			sys.exit(1)
		peers.append((host,port))
		print(peers)
	# initiate and start IoT-Devices
	iot_devices = []
	for i in range(args.devices):
		iot_device = IoTDevice(
				peers=peers,
				min_payload=args.min_payload,
				max_payload=args.max_payload,
				interval=args.interval
				)
		iot_devices.append(iot_device)
		ELEMENTS.append(iot_device)
		iot_device.start()
	bf_sink = None
	bf_tags = None
	if args.bitflow_send:
		bf_sink = initialize_bitflow(args.bitflow_send)
		try:
			bf_tags = args.bitflow_tag.split("=")
		except:
			logging.error("could not parse bitflow tag")

	while(RUNNING):
		time.sleep(report_interval)
		report(iot_devices,bf_sink,bf_tags)

	RUNNING = False

if __name__ == '__main__':
	main()
